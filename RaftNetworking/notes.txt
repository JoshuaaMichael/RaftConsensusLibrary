BaseMessage
	- Moved to getters/setters as part of class
	- Using private setters, not protected
	- No getter on StringMessage in diagram, think it's too small
	
IUDPNetworking
	endpoint should be endPoint
	OnMessageSendFailure can't return Tuples, putting the message in the exception, where it should've been anyway
	Rename udpSocket to udpClient to match class name
	Reordering peers together
	Changing List of newConnectedPeers to a Queue
	Putting statusLockObject new status
	update newMessageSendFailures queue to remove Tuple
	Using GetMessage on that failed to send exception class sucks, because exception already has Message
	
Logging
	Thinking we make a separate DLL with the class declared, for both projects

UDPNetworking
	- Update the diagram to remove duplicates from the interface
	- Used EUDPNetworkingStatus.Stopped for starting off, bad practice?
	- Not using protected anywhere
	- No one starts/stops a networking library, let's put in dispose?
	
I think we should merge everything into the same visual studios project
Only reason to separate is for deploy later, and we have to fix stuff anyway because of Documentation folder
May as well keep it simple for ourselves

Compression is not on the diagram
I don't think we'll mark our methods are virtual, because we may need to design it better
https://stackoverflow.com/questions/14451325/should-i-mark-all-methods-virtual

We can look over the idea of using locks on the objects themselves instead of using lockobjects? Bad practice?


We need a dream list

Things to think about:
	Is it thread safe?
	Can I call any function any number of times and keep working?